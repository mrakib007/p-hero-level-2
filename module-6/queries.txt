db.test.aggregate([
    //stage 1
    { $match: { gender: "Male", age: { $lt: 30 } } }
]) //match

db.test.aggregate([
    //stage 1
    { $match: { gender: "Male", age: { $lt: 30 } } },
    //stage 2
    { $project: { name: 1, age: 1, gender: 1 } }
]) 
//project the result in aggregation

db.test.aggregate([
    //stage 1
    { $match: { gender: "Male" } },
    //stage 2 
    { $match: { age: { $lt: 30 } } },
    { $project: { name: 1, gender: 1,age: 1 } },
])
//use match more than one time

db.test.aggregate([
    //stage 1
    { $match: { gender: "Male" } },
    //stage 2
    { $addFields: { course: "level -2" } },
    //stage 3
    { $project: { course: 1 } }
])
//adds course field in the current document. But the real document is not updated.

db.test.aggregate([
    //stage 1
    { $match: { gender: "Male" } },
    //stage 2
    { $addFields: { course: "level -2", eduTech: "Programming Hero",newField: "New Field" } },
    //stage 3
    { $project: { course: 1, edutech: 1, newField:1 } },
    //stage 4
    {$out: "Course-Students"}
])
//this will create a new collection named course students
with the fields that are given

db.test.aggregate([
    //stage 1
    { $match: { gender: "Male" } },
    //stage 2
    { $addFields: { course: "level -2", eduTech: "Programming Hero", newField: "New Field" } },
    //stage 3
    { $project: { course: 1, edutech: 1, newField: 1 } },
    //stage 4
    { $merge: "test" }
])
//this will change my original document and
 add the intended fields in the document

 db.test.aggregate([
    //stage 1
    { $group: { _id: "$gender" , count : {
        $sum : 1
    } } }
])
//groups data based on the id and then gives the total number 

db.test.aggregate([
    //stage 1
    {
        $group: {
            _id: "$address.country",
            count: { $sum: 1 },
            fullDoc: { $push: "$$ROOT" }
        }
    },
    //stage 2
    {
        $project: {
            "fullDoc.name": 1,
            "fullDoc.email": 1,
            "fullDoc.phone": 1,
        }
    }
])
//makes a group then pushes a field named fullDoc then shows 3 fields.

db.test.aggregate([
    //stage 1
    {
        $group: {
            _id: null,
            totalSalary: { $sum: "$salary" },
            maxSalary: { $max: "$salary" },
            minSalary: { $min: "$salary" },
            avgSalary: { $avg: "$salary" },
        }
    },
    //stage 2
    {
        $project: {
            totalSalary: 1,
            maxSalary: 1,
            minSalary: 1,
            averageSalary: "$avgSalary",
            rangeBetweenMaxAndMin: { $subtract: ["$maxSalary", "$minSalary"] }
        }
    }
])
//brings the whole document in one place and then projects 
total salary maxsalary and other fields.

db.test.aggregate([
    //stage - 1
    { $unwind: "$friends" },
    //stage - 2
    {
        $group: { _id: "$friends", count: { $sum: 1 } }
    }
])

db.test.aggregate([
    //stage 1
    {
        $unwind: "$interests"
    },
    //stage 2
    {
        $group: { _id: "$age",interestsPerAge: {$push: "$interests"}}
    }
])
//grouping the array fields according to their values.
group with unwind

db.test.aggregate([
    //stage 1
    {
        $bucket: {
            groupBy: "$age",
            boundaries: [20, 40, 60, 80],
            default: "larger than 80",
            output: {
                count: { $sum: 1 },
                whoIsInThere: {
                    // $push: "$name"
                    $push: "$$ROOT"
                }
            }
        }
    },
    //stage 2
    {
        $sort: {
            count: -1
        }
    },
    //stage 3
    {
        $limit: 2
    },
    //stage 4
    {
        $project: {
            count: 1
        }
    }

])
//Grouping with bucket with specific boundaries

db.test.aggregate([
    {
        $facet: {
            //pipeline 1
            "friendsCount": [
                //stage 1
                {
                    $unwind: "$friends"
                },
                // Stage 2
                {
                    $group: { _id: "$friends", count: { $sum: 1 } }
                }
            ],
            //pipeline 2
            "educationCount": [
                //stage 1
                {
                    $unwind: "$education"
                },
                //stage 2
                {
                    $group: { _id: "$education", count: { $sum: 1 } }
                }
            ],
            //pipeline 3
            "skillsCount": [
                //stage 1
                {
                    $unwind: "$skills"
                },
                //stage 2
                {
                    $group: { _id: "$skills", count: { $sum: 1 } }
                }
            ]
        }
    }
])
//Facet for multiple pipeline and the group them with unwind.

db.orders.aggregate([
    {
        $lookup: {
               from: "test",
               localField: "userId",
               foreignField: "_id",
               as: "user"
             }
    }
    ])
//Lookup stage and embedding vs referencing

db.getCollection("massive-data").createIndex({email: 1})
//creating a new index and then collscanning and ixscanning
//ixscanning form big data collscanning for small data

db.getCollection("massive-data").createIndex({
    about : "text"
})
//creating a new index for searching with a text

db.getCollection("massive-data").find({$text : {
    $search: "dolor"
} }).project({
    about:1
})
//searching with specific text and
 learning about compound index and text index
